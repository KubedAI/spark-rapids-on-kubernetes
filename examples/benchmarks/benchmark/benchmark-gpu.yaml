# Replace <S3_BUCKET> with the bucket name created by the blueprint. Checkout the values form `terraform output`
# Copy the PySpark script to S3 bucket
# aws s3 cp examples/benchmarks/benchmark/spark-rapids-benchmarks.py s3://<S3_BUCKET>/benchmark/scripts/
---
apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: spark-rapids-benchmark-1gpu
  namespace: data-eng-team
spec:
  type: Python
  pythonVersion: "3"
  mode: cluster
  image: kubedai/spark-rapids-k8s-cuda:spark-3.5.1_rapids-24.08.1_cuda-11.8_java-8  # Replace with your image URI
  imagePullPolicy: Always
  mainApplicationFile: "s3a://<S3_BUCKET>/benchmark/scripts/spark-rapids-benchmarks.py"  # Main Python script for benchmarking
  arguments:
    - "s3a://<S3_BUCKET>/benchmark/input"    # Input path (data generated earlier)
    - "s3a://<S3_BUCKET>/benchmark/output/gpu"   # Output path for benchmark results
  sparkVersion: "3.5.1"
  restartPolicy:
    type: Never
  hadoopConf:
    "fs.s3a.aws.credentials.provider": "com.amazonaws.auth.WebIdentityTokenCredentialsProvider"
    "fs.s3a.impl": "org.apache.hadoop.fs.s3a.S3AFileSystem"
    "mapreduce.fileoutputcommitter.algorithm.version": "2"
  sparkConf:
    "spark.app.name": "spark-benchmark-gpu"
    "spark.kubernetes.driver.pod.name": "spark-benchmark-gpu"
    "spark.kubernetes.executor.podNamePrefix": "spark-benchmark-gpu"
    "spark.speculation": "false"
    "spark.network.timeout": "2400"
    "spark.hadoop.fs.s3a.connection.timeout": "1200000"
    "spark.hadoop.fs.s3a.path.style.access": "true"
    "spark.hadoop.fs.s3a.connection.maximum": "200"
    "spark.hadoop.fs.s3a.fast.upload": "true"
    "spark.hadoop.fs.s3a.readahead.range": "256K"
    "spark.hadoop.fs.s3a.input.fadvise": "random"
    "spark.hadoop.fs.s3a.impl": "org.apache.hadoop.fs.s3a.S3AFileSystem"
    "spark.local.dir": "/data1"
    "spark.dynamicAllocation.enabled": "false"
    "spark.ui.port": "4045"

    # Spark Event logs
    "spark.eventLog.enabled": "true"
    "spark.eventLog.dir": "s3a://<S3_BUCKET>/spark-event-logs"
    "spark.eventLog.rolling.enabled": "true"
    "spark.eventLog.rolling.maxFileSize": "64m"
    # "spark.history.fs.eventLog.rolling.maxFilesToRetain": 100

    # Expose Spark metrics for Prometheus
    "spark.ui.prometheus.enabled": "true"
    "spark.executor.processTreeMetrics.enabled": "true"
    "spark.kubernetes.driver.annotation.prometheus.io/scrape": "true"
    "spark.kubernetes.driver.annotation.prometheus.io/path": "/metrics/executors/prometheus/"
    "spark.kubernetes.driver.annotation.prometheus.io/port": "4040"
    "spark.kubernetes.driver.service.annotation.prometheus.io/scrape": "true"
    "spark.kubernetes.driver.service.annotation.prometheus.io/path": "/metrics/driver/prometheus/"
    "spark.kubernetes.driver.service.annotation.prometheus.io/port": "4040"
    "spark.metrics.conf.*.sink.prometheusServlet.class": "org.apache.spark.metrics.sink.PrometheusServlet"
    "spark.metrics.conf.*.sink.prometheusServlet.path": "/metrics/driver/prometheus/"
    "spark.metrics.conf.master.sink.prometheusServlet.path": "/metrics/master/prometheus/"
    "spark.metrics.conf.applications.sink.prometheusServlet.path": "/metrics/applications/prometheus/"
    # Determines how many CPU cores each Spark task will use. In this case, each task uses 1 CPU core.
    "spark.task.cpus": "1"  # Allocates 1 CPU core per Spark task.

    # Specifies the fraction of GPU allocated per task. Here, 0.166 means each task will use 1/6th of a GPU,
    # allowing up to 6 tasks to share a single GPU. This matches the executor's CPU configuration (6 cores per executor).
    "spark.task.resource.gpu.amount": "0.166"  # Each task gets 1/6th of a GPU, enabling 6 tasks per GPU.

    # Defines the total number of GPUs available for each Spark executor. In this case, each executor gets 1 full GPU.
    "spark.executor.resource.gpu.amount": "1"  # Allocates 1 GPU per executor.
    "spark.rapids.sql.concurrentGpuTasks": "2"  # Each Spark Task only half of the GPU with value 2
    "spark.rapids.memory.pinnedPool.size": "2g"  # Defines GPU memory pinned pool size for faster memory access
    "spark.executor.memoryOverhead": "2g"  # Allocates additional memory overhead to prevent executor crashes
    "spark.rapids.sql.batchSizeBytes": "512m"  # Sets the target batch size for GPU processing in SQL operations
    "spark.rapids.sql.reader.batchSizeBytes": "512m"  # Sets the batch size for data reading into GPU memory
    "spark.sql.files.maxPartitionBytes": "512m"  # Controls the max size of each file partition during reading
    "spark.sql.shuffle.partitions": "8"  # Adjusts the number of shuffle partitions to balance workload and performance
    "spark.plugins": "com.nvidia.spark.SQLPlugin"  # Enables the NVIDIA RAPIDS Accelerator for Spark SQL processing
    "spark.shuffle.manager": "com.nvidia.spark.rapids.spark351.RapidsShuffleManager"  # Uses RAPIDS Shuffle Manager for GPU-accelerated shuffling
    "spark.executor.resource.gpu.discoveryScript": "/opt/sparkRapidsPlugin/getGpusResources.sh"  # Script to discover available GPUs for Spark executors
    "spark.executor.resource.gpu.vendor": "nvidia.com"
    "spark.executor.extraLibraryPath": "/usr/local/cuda/lib:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/targets/x86_64-linux/lib:/usr/lib/hadoop/lib/native:/usr/lib/hadooplzo/lib/native:/docker/usr/lib/hadoop/lib/native:/docker/usr/lib/hadoop-lzo/lib/native"
    "spark.dynamicAllocation.enabled": "false"  # Disables dynamic allocation to ensure static resource allocation for executors
    "spark.rapids.sql.enabled": "true"  # Enables GPU acceleration for SQL queries using RAPIDS
    "spark.rapids.shuffle.enabled": "true"  # Enables RAPIDS accelerated shuffle for improved GPU performance
    "spark.rapids.cloudSchemes": "s3a"  # Ensures RAPIDS can work with S3 cloud storage schemes
    "spark.rapids.memory.gpu.pool": "ASYNC"  # Uses asynchronous GPU memory pool allocation for faster processing
    "spark.rapids.memory.gpu.allocFraction": "0.8"  # Allocates 80% of available GPU memory to tasks for efficiency
    "spark.rapids.memory.gpu.maxAllocFraction": "0.9"  # Sets a 90% max GPU memory allocation limit to avoid exceeding resources
    "spark.rapids.memory.gpu.minAllocFraction": "0.25"  # Ensures at least 25% of GPU memory is always allocated
    "spark.rapids.sql.shuffle.spillThreads": "16"  # Number of threads to handle shuffle spilling to disk during processing
    "spark.rapids.sql.metrics.level": "MODERATE"  # Set metrics collection level to moderate to balance overhead and insights
    "spark.rapids.sql.explain": "ALL"  # Provides full explanation for query placement on GPU during execution
    "spark.rapids.sql.stableSort.enabled": "true"  # Enables stable sorting using RAPIDS on GPU for consistent results
    "spark.rapids.sql.variableFloatAgg.enabled": "false"  # Disables variable float aggregation due to potential incompatibilities
    "spark.rapids.sql.explain": "NOT_ON_GPU"  # Logs why certain operations are not executed on GPU, useful for debugging
    "spark.rapids.sql.incompatibleOps.enabled": "true"  # Allows running operations on CPU when not supported on GPU
    "spark.rapids.shuffle.mode": "MULTITHREADED"  # Enables multithreaded shuffle for enhanced data processing performance
    "spark.sql.adaptive.enabled": "true"  # Enables Adaptive Query Execution (AQE) for dynamic optimization of query plans
  driver:
    cores: 1
    coreLimit: "1200m"
    memory: "4g"
    labels:
      version: "3.5.1"
    serviceAccount: data-eng-team
    securityContext:
      runAsUser: 185
    nodeSelector:
      node-type: ssd-x86
      karpenter.sh/capacity-type: on-demand
    volumeMounts:
      - name: "test-volume"
        mountPath: "/tmp"
    volumeMounts:
      - name: spark-local-dir-1
        mountPath: /data1
        readOnly: false
    initContainers:
      - name: volume-permission
        image: public.ecr.aws/docker/library/busybox
        command: ['sh', '-c', 'mkdir -p /data1 && ls -l /data1 && chown -R 185:185 /data1']
        volumeMounts:
          - name: spark-local-dir-1
            mountPath: /data1
            readOnly: false
  executor:
    cores: 6 # Aiming for g6.2xlarge with 8vCPU and 1 GPU
    instances: 2
    memory: "20g"
    gpu:
      name: "nvidia.com/gpu"
      quantity: 1
    labels:
      version: "3.5.1"
    securityContext:
      runAsUser: 185
    serviceAccount: data-eng-team
    nodeSelector:
      node-type: g-a10g-single # Change this to "g-a10g-multigpu" to spinup multi gpu instance
    volumeMounts:
      - name: spark-local-dir-1
        mountPath: /data1
    initContainers:
      - name: volume-permission
        image: public.ecr.aws/docker/library/busybox
        command: ['sh', '-c', 'mkdir -p /data1; chown -R 185:185 /data1']
        volumeMounts:
          - name: spark-local-dir-1
            mountPath: /data1
    tolerations:
      - key: "nvidia.com/gpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
  volumes:
    - name: spark-local-dir-1
      hostPath:
        path: "/mnt/k8s-disks/0"
        type: DirectoryOrCreate
    - name: "test-volume"
      hostPath:
        path: "/tmp"
        type: Directory
